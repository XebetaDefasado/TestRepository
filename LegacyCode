/*"Legacy Code" so you can see my suffering in a step-by-step tutorial:



if(textbox.innerHTML.match(/&nbsp;\u0065&nbsp/) !== null){
    matcher = textbox.innerHTML.match(/&nbsp;\u0065&nbsp;/)
    textbox.innerHTML = textbox.innerHTML.replace(/&nbsp;\u0065&nbsp;/, `&nbsp;${pickRandom(AditiveConj)}&nbsp;`)
}

(&nbsp;|\u0020)\u0065(&nbsp;|\u0020)



Checking.push(Object.create({i: false}))



for(let j = 0; j < arguments.length; j++){
                for(let i = 0; i < arguments[j].length; i++){
                    Object.defineProperty(Checking, arguments[j][i], {value: false})
                }
            }



for(let j = 0; j < arguments.length; j++){
                for(let i = 0; i < arguments[j].length; i++){
                    Checking.push(`${arguments[j][i]}: ${false}`)
                }
            }
            return console.log(Checking[0].slice(Checking[0].indexOf(false), Checking[0].length))




Object.defineProperty(Checking, arguments[j][i], {value: false, configurable: false})



function eAditive() {
            while(textbox.innerHTML.match(/(&nbsp;|\u0020)\u0065(&nbsp;|\u0020)/) !== null){
                let matcher = textbox.innerHTML.match(/(&nbsp;|\u0020)\u0065(&nbsp;|\u0020)/)[0]
                let spaceBef = matcher.slice(0, (matcher.indexOf('\u0065')))
                let spaceAft = matcher.slice(matcher.indexOf('\u0065') +1, matcher.length)
                textbox.innerHTML = textbox.innerHTML.replace(matcher, `${spaceBef}${pickRandom(AditiveConj)}${spaceAft}`)
            }
            CheckingF[0].e = true
            console.log(CheckingF);
            return 
        }
        eAditive()

    14.25%{color: #FF0000};
    28.5%{color: #FF7F00};
    42.72%{color: #FFFF00};
    57%{color: #00FF00};
    71.25%{color: #00FFFF};
    85.5%{color: #0000FF};
    99.75%{color: #8B00FF};
    100%{color: #000000}
    
    if(textbox.innerHTML){
            for(e in AditiveConj){
                let pattern = new RegExp(`(&nbsp;|\u0020)${AditiveConj[e]}(&nbsp;|\u0020)`)
                while(textbox.innerHTML.match(pattern)){
                    let newWord = String(pickRandom(AditiveConj))
                    textbox.innerHTML = textbox.innerHTML.replace(pattern, `&nbsp;${newWord.toUpperCase()}&nbsp;`)
                }
                Object.defineProperty(CheckingF[e], AditiveConj[e], {value: true, writable: true})   
            }
            return 
        }

    //calc(100vw - calc(50vw - 2px) - 200px);


    <ul id="optionsList">
        <li class="no-marker">
          <label for="showChangedWords" class="label">Show changed words</label>
          <div class="dropdown">
            This option let you see what words were changed during the text
            alteration. In other words, if the word "mais" was altered to
            another word, this will display: "mais: true" meaning that the word
            "mais" was in fact altered.
          </div>
          <label class="customCheckmark">
            <input
              type="checkbox"
              id="showChangedWords"
              class="hideDefault"
              checked
            />
            <span class="checkmark"></span>
          </label>
        </li>
        <li class="no-marker">
          <label for="formatWords" class="label">Format altered words</label>
          <div class="dropdown">
            This option let you format the altered words, replacing the
            uppercases for lowercases. Please review the text for incorrect
            lowercase punctuation.
          </div>
          <label class="customCheckmark">
            <input type="checkbox" id="formatWords" class="hideDefault" />
            <span class="checkmark"></span>
          </label>
        </li>
        <li class="no-marker">
          <label for="underlineRemoval" class="label">Remove underlines</label>
          <div class="dropdown">
            This option let you remove underlines from the text. But understand
            that you will not be able to alter correctly without disabling this
            option.
          </div>
          <label class="customCheckmark">
            <input type="checkbox" id="underlineRemoval" class="hideDefault" />
            <span class="checkmark"></span>
          </label>
        </li>
      </ul>

      if(showChangedWords.checked){
                    for(let e of CheckingF){
                        if(String(Object.getOwnPropertyNames(e)).match(/\u005F/) !== null){
                            let word = String(Object.getOwnPropertyNames(e))
                            let valueSave = String(e[word])
                            word = word.replace(/\u005F/g, '\u0020')
                            e = {}
                            Object.defineProperty(e, word, {value: valueSave, writable: true})
                        }
                        optionsResults.innerHTML += `${Object.getOwnPropertyNames(e.valueOf())}:\u0020${e.valueOf()[Object.getOwnPropertyNames(e.valueOf())]} <br>`
                    }
                    if(booleanContainer){
                        let lengthSaver = booleanContainer.length
                        booleanContainer = booleanContainer.filter((el) => {return el[Object.getOwnPropertyNames(el)] === false})
                        if(lengthSaver === booleanContainer.length){
                            optionsResults.innerHTML = "Nothing changed at all."
                        }
                    }
                }

.textFor{
    transition: none;
    text-decoration: underline;
    cursor: pointer;
}
.textFor:hover{
    color: #0000aa;
}
.dropdown{
    position: fixed;
    width: 0;
    height: 0;
    background-color: white;
    display: none;
    font-family: monospace;
    z-index: 10;
}
.textFor:hover ~ .dropdown{
    --wd: calc(200px - 2px - 10px);
    transform: translateY(calc((10vh - 50%) - 100px));
    width: var(--wd);
    height: fit-content;
    border: 1px solid black;
    padding: 5px;
    display: block;
}

.customCheckmark{
    position: relative;
    display: block;
    cursor: pointer;
    width: 13px;
    height: 13px;
    margin-left: 10px;
}
.hideDefault{
    cursor: pointer;
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
}
.checkmark{
    transition: none;
    position: absolute;
    width: 11px;
    height: 11px;
    background-color: white;
    border: 1px solid black;
    border-radius: 15%;
    display: flex;
    justify-content: center;
    align-items: center;
}
.hideDefault:checked ~ .checkmark{
    background-color: #909090;
    box-shadow: 0px 0px 5px #909090;
    animation-name: animate;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}
.hideDefault:checked ~ .checkmark::after{
    display: block;
}
.checkmark::after{
    transition: none;
    position: absolute;
    content: "";
    display: none;
    width: 7px;
    height: 3px;
    border: solid black;
    border-width: 0px 0px 2px 2px;
    transform: rotate(-60deg);
    bottom: 4px
}
@keyframes animate {
    0%{box-shadow: 0px 0px 5px #909090;}
    100%{box-shadow: 0px 0px 10px #000000;}
}

#optionsList{
    display: flex;
    justify-content: space-evenly;
    flex-direction: column;
    width: calc(100vw - calc(50vw - 2px) - 200px);
    max-width: calc(100vw - calc(50vw - 2px) - 200px);
    height: 30vh;
}

<div class="grid">
        <li class="no-marker">
          <label for="1" class="l">Show Changed Words</label>
          <label class="customCheckmark">
            <input id="1" type="checkbox" class="hideDefault" checked />
            <span class="checkmark"></span>
          </label>
        </li>
        <div class="dropdown 2"></div>
        <li class="no-marker">
          <label for="2" class="l">Remove Underlines</label>
          <label class="customCheckmark">
            <input id="2" type="checkbox" class="hideDefault" />
            <span class="checkmark"></span>
          </label>
        </li>
        <div class="dropdown 3"></div>
        <li class="no-marker">
          <label for="3" class="l">Lowercase Letters</label>
          <label class="customCheckmark">
            <input id="3" type="checkbox" class="hideDefault" />
            <span class="checkmark"></span>
          </label>
        </li>
        <div class="dropdown 4"></div>
        <li class="no-marker">
          <label for="4" class="l">Clean Textbox</label>
          <label class="customCheckmark">
            <input id="4" type="checkbox" class="hideDefault" />
            <span class="checkmark"></span>
          </label>
        </li>
      </div>
*/

//This crap refuse to stay as PlainText